rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    function isSignedIn() {
      return request.auth.uid != null;
    }

    match /puzzles/{puzzleId} {
      allow read;
      allow create: if (
        isSignedIn() &&
        isPuzzleOwner() &&
        isValidPuzzle() &&
        isCreatedAtNow() &&
        isUpdatedAtNow()
      );
      allow update: if (
        isSignedIn() &&
        onlyUpdatableFieldsChanged() &&
        isUpdatedAtNow() &&
        wasNotUpdatedRecently() &&
        isPuzzleOwner() &&
        isValidPuzzle()
      );

      function onlyUpdatableFieldsChanged() {
        return request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'title', 'cells', 'updatedAt'
        ]);
      }

      function wasNotUpdatedRecently() {
        return (request.time - resource.data.updatedAt).seconds() > 1;
      }

      function isCreatedAtNow() {
        return request.resource.data.createdAt == request.time;
      }

      function isUpdatedAtNow() {
        return request.resource.data.updatedAt == request.time;
      }

      function isPuzzleOwner() {
        return request.resource.data.ownerUid == request.auth.uid;
      }

      function isValidPuzzle() {
        let requiredKeys = ['updatedAt', 'createdAt', 'ownerUid', 'cells', 'title'];
        return (
          (request.resource.data.keys().hasOnly(requiredKeys)) &&
          (request.resource.data.keys().hasAll(requiredKeys)) &&
          (request.resource.data.title.size() >= 3)
        );
      }
    }
  }
}
